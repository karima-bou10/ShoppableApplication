{"ast":null,"code":"//import components\nimport ProductModal from \"../components/Product/ProductModal.vue\";\nimport InfoProdModal from \"../components/Product/InfoProdModal.vue\";\nimport DeleteProdModal from \"../components/Product/DeleteProdModal.vue\";\nimport EditProdModal from \"../components/Product/EditProdModal.vue\";\n//import services\nimport CategoryService from \"../services/category.service.js\";\nimport ProductService from \"../services/product.service.js\";\nexport default {\n  name: \"Product\",\n  components: {\n    ProductModal,\n    InfoProdModal,\n    DeleteProdModal,\n    EditProdModal\n  },\n  data() {\n    return {\n      categories: [],\n      products: [],\n      selectedProduct: null,\n      showModal: false,\n      showInfoModal: false,\n      showEditModal: false,\n      showDeleteModalFlag: false,\n      productToDelete: null,\n      dropDownCategory: false,\n      showNewCategoryInput: false,\n      newCategoryName: \"\",\n      selectedCategory: null,\n      buttonText: \"Category\",\n      searchQuery: \"\",\n      showSuccessAlert: false,\n      message: \"\",\n      categoryExists: false\n    };\n  },\n  async mounted() {\n    try {\n      // Fetch categories\n      const categoriesResponse = await CategoryService.getAllCategories();\n      this.categories = categoriesResponse.data;\n\n      // Fetch products\n      const productsResponse = await ProductService.getAllProducts();\n      this.products = productsResponse.data;\n\n      // Assign category name to each product\n      for (const product of this.products) {\n        product.categoryName = await this.getCategoryName(product.category);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  },\n  computed: {\n    // Computed property to filter products based on selected category\n    filteredProducts() {\n      const query = this.searchQuery.toLowerCase().trim();\n      if (!query && !this.selectedCategory) {\n        return this.products; // Return all products if no category is selected and search query is empty\n      } else if (!query && this.selectedCategory) {\n        // Filter products based on selected category only\n        return this.products.filter(product => product.category === this.selectedCategory.id);\n      } else if (query && !this.selectedCategory) {\n        // Filter products based on search query only\n        return this.products.filter(product => product.name.toLowerCase().includes(query));\n      } else {\n        // Filter products based on both selected category and search query\n        return this.products.filter(product => product.category === this.selectedCategory.id && product.name.toLowerCase().includes(query));\n      }\n    }\n  },\n  methods: {\n    async getCategoryName(categoryId) {\n      try {\n        const category = await CategoryService.getCategoryById(categoryId);\n        return category.name;\n      } catch (error) {\n        console.error(\"Error fetching category by id:\", error);\n        return \"Unknown\";\n      }\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n      const day = date.getDate().toString().padStart(2, \"0\");\n      return `${year}-${month}-${day}`;\n    },\n    // Method to handle info button click and set selectedProduct\n    showProductInfo(product) {\n      this.selectedProduct = product;\n      this.showInfoModal = true;\n    },\n    // Method to handle edit button click and set selectedProduct\n    showProductEdit(product) {\n      this.selectedProduct = product;\n      this.showEditModal = true;\n    },\n    toggleNewCategoryInput() {\n      this.showNewCategoryInput = !this.showNewCategoryInput; // Toggle the visibility of the input field and add button\n      if (!this.showNewCategoryInput) {\n        this.newCategoryName = \"\"; // Clear the input field if it's hidden\n      }\n    },\n    showDeleteModal(product) {\n      this.showDeleteModalFlag = true;\n      this.productToDelete = product;\n    },\n    closeDeleteModal() {\n      this.showDeleteModalFlag = false;\n      this.productToDelete = null;\n    },\n    deleteProduct() {\n      if (this.productToDelete) {\n        // Assuming you have an array of products, remove the product\n        const index = this.products.findIndex(product => product.id === this.productToDelete.id);\n        if (index !== -1) {\n          this.products.splice(index, 1);\n        }\n        // You may need to make an API call to delete the product from the server as well\n      }\n      this.closeDeleteModal();\n    },\n    // Method to add new product to the products array\n    async handleSaveProduct(newProduct) {\n      console.log(\"created product data:\", newProduct);\n      // Fetch the updated list of products\n      const updatedProductsResponse = await ProductService.getAllProducts();\n      // Update the products array with the newly fetched list\n      this.products = updatedProductsResponse.data;\n      //this.mounted();\n      // Show success alert with delete message\n      this.showSuccessAlert = true;\n      this.message = \"Product created successfully.\";\n    },\n    handleSaveChanges(editedProduct) {\n      // Find the index of the edited product in the products array\n      const index = this.products.findIndex(product => product.id === editedProduct.id);\n      if (index !== -1) {\n        // Update the product data in the products array\n        this.products[index] = editedProduct;\n      }\n      // Close the edit modal\n      this.showEditModal = false;\n    },\n    async addNewCategory() {\n      // Check if the new category name is not empty\n      if (this.newCategoryName.trim() !== \"\") {\n        try {\n          await CategoryService.createCategory({\n            name: this.newCategoryName\n          });\n\n          // Fetch the updated list of categories\n          const updatedCategoriesResponse = await CategoryService.getAllCategories();\n          // Update the categories array with the newly fetched list\n          this.categories = updatedCategoriesResponse.data;\n\n          // Show success alert with delete message\n          this.showSuccessAlert = true;\n          this.message = \"Category created successfully.\";\n          this.categoryExists = false;\n          this.newCategoryName = \"\"; // Clear the input field after adding the category\n          this.toggleNewCategoryInput(); // Hide the input field and add button after adding the category\n        } catch (error) {\n          // Handle error response\n          if (error.response && error.response.status === 400) {\n            this.categoryExists = true; // Set flag to display error message\n            console.error(\"Error Category already exist:\", error);\n          } else {\n            // Other errors\n            console.error(\"Error creating category:\", error);\n          }\n        }\n      }\n    },\n    async deleteCategory(id) {\n      // this.categories.splice(index, 1);\n      try {\n        await CategoryService.deleteCategory(id);\n        // Fetch the updated list of categories\n        const updatedCategoriesResponse = await CategoryService.getAllCategories();\n        // Update the categories array with the newly fetched list\n        this.categories = updatedCategoriesResponse.data;\n        // Show success alert with delete message\n        this.showSuccessAlert = true;\n        this.message = \"Category deleted successfully.\";\n      } catch (error) {\n        console.error(\"Error deleting category:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ProductModal","InfoProdModal","DeleteProdModal","EditProdModal","CategoryService","ProductService","name","components","data","categories","products","selectedProduct","showModal","showInfoModal","showEditModal","showDeleteModalFlag","productToDelete","dropDownCategory","showNewCategoryInput","newCategoryName","selectedCategory","buttonText","searchQuery","showSuccessAlert","message","categoryExists","mounted","categoriesResponse","getAllCategories","productsResponse","getAllProducts","product","categoryName","getCategoryName","category","error","console","computed","filteredProducts","query","toLowerCase","trim","filter","id","includes","methods","categoryId","getCategoryById","formatDate","dateString","date","Date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","showProductInfo","showProductEdit","toggleNewCategoryInput","showDeleteModal","closeDeleteModal","deleteProduct","index","findIndex","splice","handleSaveProduct","newProduct","log","updatedProductsResponse","handleSaveChanges","editedProduct","addNewCategory","createCategory","updatedCategoriesResponse","response","status","deleteCategory"],"sources":["C:\\Users\\hp\\ShoppableApplication\\admin\\src\\views\\Products.vue"],"sourcesContent":["<template>\r\n  <main id=\"Product-page\">\r\n    <form class=\"flex items-center ml-12 mt-20 relative\">\r\n      <label for=\"search\" class=\"sr-only\">Search</label>\r\n      <div class=\"flex items-center relative w-full\">\r\n        <div\r\n          class=\"absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none\"\r\n        >\r\n          <svg\r\n            class=\"w-4 h-4 me-2\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 20 20\"\r\n          >\r\n            <path\r\n              stroke=\"#8a8a8a\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              stroke-width=\"2\"\r\n              d=\"m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z\"\r\n            />\r\n          </svg>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"searchQuery\"\r\n          id=\"search\"\r\n          class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block ps-10 p-2.5\"\r\n          placeholder=\"Search ...\"\r\n          style=\"width: 20rem\"\r\n        />\r\n        <div class=\"relative\">\r\n          <button\r\n            id=\"dropdowncatButton\"\r\n            class=\"text-white bg-gray-500 hover:bg-gray-600 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 mx-5 py-2.5 text-center inline-flex items-center\"\r\n            type=\"button\"\r\n            @click=\"dropDownCategory = !dropDownCategory\"\r\n          >\r\n            {{ buttonText }}\r\n            <svg\r\n              class=\"w-2.5 h-2.5 ms-3\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 10 6\"\r\n            >\r\n              <path\r\n                stroke=\"currentColor\"\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                stroke-width=\"2\"\r\n                d=\"m1 1 4 4 4-4\"\r\n              />\r\n            </svg>\r\n          </button>\r\n\r\n          <!-- Dropdown menu -->\r\n          <div\r\n            v-if=\"dropDownCategory\"\r\n            class=\"absolute z-30 top-12 left-0 bg-white rounded-lg shadow w-60\"\r\n          >\r\n            <ul class=\"h-48 py-2 overflow-y-auto text-left text-gray-700\">\r\n              <li>\r\n                <a\r\n                  href=\"#\"\r\n                  class=\"px-4 py-2 text-gray-500 hover:bg-gray-100\"\r\n                  @click=\"\r\n                    selectedCategory = null;\r\n                    buttonText = 'Category';\r\n                  \"\r\n                >\r\n                  All\r\n                </a>\r\n              </li>\r\n              <li v-for=\"(category, index) in categories\" :key=\"index\">\r\n                <div class=\"block flex justify-between\">\r\n                  <div class=\"px-4 py-2 hover:bg-gray-100\">\r\n                    <a\r\n                      href=\"#\"\r\n                      @click=\"\r\n                        selectedCategory = category;\r\n                        buttonText = category.name;\r\n                      \"\r\n                    >\r\n                      {{ category.name }}\r\n                    </a>\r\n                  </div>\r\n                  <div class=\"flex h-8 px-4 py-2\">\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 448 512\"\r\n                      class=\"cursor-pointer\"\r\n                      @click=\"deleteCategory(category.id)\"\r\n                    >\r\n                      <path\r\n                        fill=\"#b92525\"\r\n                        d=\"M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96 64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z\"\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <a\r\n              href=\"#\"\r\n              class=\"flex items-center p-3 text-sm font-medium text-blue-600 border-t border-gray-200 rounded-b-lg bg-gray-50 dark:border-gray-600 hover:bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-blue-500 hover:underline\"\r\n              @click=\"toggleNewCategoryInput\"\r\n            >\r\n              <svg\r\n                class=\"w-4 h-4 me-2\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 20 20\"\r\n                style=\"margin-top: -6px\"\r\n              >\r\n                <path\r\n                  stroke=\"#476ffe\"\r\n                  stroke-linecap=\"round\"\r\n                  stroke-linejoin=\"round\"\r\n                  stroke-width=\"2\"\r\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\r\n                />\r\n              </svg>\r\n              Add new category\r\n            </a>\r\n            <!-- New category input field and button -->\r\n            <div v-if=\"showNewCategoryInput\" class=\"p-4\">\r\n              <input\r\n                v-model=\"newCategoryName\"\r\n                type=\"text\"\r\n                placeholder=\"New category\"\r\n                class=\"bg-gray-100 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-full mb-3\"\r\n              />\r\n              <div v-if=\"categoryExists\" class=\"text-xs pb-3 text-red-600\">\r\n                Category name already exists\r\n              </div>\r\n              <button\r\n                @click=\"addNewCategory\"\r\n                type=\"button\"\r\n                class=\"text-white bg-blue-500 hover:bg-blue-600 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center\"\r\n              >\r\n                Add\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Modal toggle -->\r\n      <button\r\n        class=\"flex justify-around items-center py-2 px-3 ms-2 me-6 text-base font-medium text-white bg-blue-800 rounded-full border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300\"\r\n        type=\"button\"\r\n        @click=\"showModal = true\"\r\n      >\r\n        <svg\r\n          class=\"w-6 h-6 me-2 mt-0.5\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 20 20\"\r\n          style=\"margin-top: -6px\"\r\n        >\r\n          <path\r\n            stroke=\"#ffffff\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke-width=\"2\"\r\n            d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\r\n          />\r\n        </svg>\r\n        <span class=\"whitespace-nowrap\">Add product</span>\r\n      </button>\r\n    </form>\r\n\r\n    <!-- Affichage du modal de création de produit -->\r\n    <ProductModal\r\n      v-if=\"showModal\"\r\n      :categories=\"categories\"\r\n      @close=\"showModal = false\"\r\n      @save=\"handleSaveProduct\"\r\n    />\r\n\r\n    <!-- Products Table  -->\r\n    <div\r\n      class=\"table-container relative shadow-md sm:rounded-lg my-8 mx-7 overflow-y-scroll\"\r\n    >\r\n      <table class=\"w-full text-sm rtl:text-right text-gray-500\">\r\n        <thead class=\"sticky top-0 z-10 text-xs uppercase\">\r\n          <tr>\r\n            <th scope=\"col\" class=\"px-3 py-3\">\r\n              <span class=\"sr-only\">Image</span>\r\n            </th>\r\n            <th scope=\"col\" class=\"px-6 py-3\">Id</th>\r\n            <th scope=\"col\" class=\"px-6 py-3\">Name</th>\r\n            <th scope=\"col\" class=\"px-6 py-3\">Category</th>\r\n            <th scope=\"col\" class=\"px-6 py-3\">Price</th>\r\n            <th scope=\"col\" class=\"px-6 py-3\">Quantity</th>\r\n            <th scope=\"col\" class=\"px-6 py-3 whitespace-nowrap\">\r\n              Creation date\r\n            </th>\r\n            <th scope=\"col\" class=\"px-6 py-3\">Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr\r\n            v-for=\"(product, index) in filteredProducts\"\r\n            :key=\"index\"\r\n            class=\"group relative odd:bg-white even:bg-gray-50 border-b\"\r\n          >\r\n            <td class=\"p-4\">\r\n              <img\r\n                :src=\"product.image\"\r\n                :alt=\"product.name\"\r\n                class=\"md:w-9 max-w-full max-h-full\"\r\n              />\r\n            </td>\r\n            <td class=\"px-6 py-4\">{{ index + 1 }}</td>\r\n            <td\r\n              scope=\"row\"\r\n              class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap\"\r\n            >\r\n              {{ product.name }}\r\n            </td>\r\n            <td class=\"px-6 py-4\">\r\n              {{ product.categoryName }}\r\n            </td>\r\n            <td class=\"px-6 py-4\">{{ product.price }}</td>\r\n            <td class=\"px-6 py-4\">{{ product.quantity }}</td>\r\n            <td class=\"px-6 py-4\">{{ formatDate(product.creationDate) }}</td>\r\n\r\n            <td class=\"px-6 py-4\">\r\n              <div class=\"button-group flex justify-between\">\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"action-button edit-button\"\r\n                  @click=\"showProductEdit(product)\"\r\n                >\r\n                  <div class=\"icon-container\">\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 512 512\"\r\n                    >\r\n                      <path\r\n                        fill=\"#ffffff\"\r\n                        d=\"M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160V416c0 53 43 96 96 96H352c53 0 96-43 96-96V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96z\"\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n                <!-- Pass selected product data to EditProdModal component -->\r\n                <EditProdModal\r\n                  v-if=\"showEditModal\"\r\n                  @close=\"showEditModal = false\"\r\n                  :selectedProduct=\"selectedProduct\"\r\n                  @save=\"handleSaveChanges\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"action-button info-button\"\r\n                  @click=\"showProductInfo(product)\"\r\n                >\r\n                  <div class=\"icon-container\">\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 192 512\"\r\n                    >\r\n                      <path\r\n                        fill=\"#ffffff\"\r\n                        d=\"M48 80a48 48 0 1 1 96 0A48 48 0 1 1 48 80zM0 224c0-17.7 14.3-32 32-32H96c17.7 0 32 14.3 32 32V448h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H64V256H32c-17.7 0-32-14.3-32-32z\"\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n                <!-- Pass selected product data to InfoProdModal component -->\r\n                <InfoProdModal\r\n                  v-if=\"showInfoModal\"\r\n                  @close=\"showInfoModal = false\"\r\n                  :selectedProduct=\"selectedProduct\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"action-button delete-button\"\r\n                  @click=\"showDeleteModal(product)\"\r\n                >\r\n                  <div class=\"icon-container\">\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 448 512\"\r\n                    >\r\n                      <path\r\n                        fill=\"#ffffff\"\r\n                        d=\"M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96 64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z\"\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n                <!-- Affichage du modal de suppression de produit -->\r\n                <DeleteProdModal\r\n                  v-if=\"showDeleteModalFlag\"\r\n                  :showDeleteModal=\"showDeleteModalFlag\"\r\n                  @close=\"closeDeleteModal\"\r\n                  @delete=\"deleteProduct\"\r\n                />\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\n//import components\r\nimport ProductModal from \"../components/Product/ProductModal.vue\";\r\nimport InfoProdModal from \"../components/Product/InfoProdModal.vue\";\r\nimport DeleteProdModal from \"../components/Product/DeleteProdModal.vue\";\r\nimport EditProdModal from \"../components/Product/EditProdModal.vue\";\r\n//import services\r\nimport CategoryService from \"../services/category.service.js\";\r\nimport ProductService from \"../services/product.service.js\";\r\n\r\nexport default {\r\n  name: \"Product\",\r\n  components: {\r\n    ProductModal,\r\n    InfoProdModal,\r\n    DeleteProdModal,\r\n    EditProdModal,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      categories: [],\r\n      products: [],\r\n      selectedProduct: null,\r\n      showModal: false,\r\n      showInfoModal: false,\r\n      showEditModal: false,\r\n      showDeleteModalFlag: false,\r\n      productToDelete: null,\r\n      dropDownCategory: false,\r\n      showNewCategoryInput: false,\r\n      newCategoryName: \"\",\r\n      selectedCategory: null,\r\n      buttonText: \"Category\",\r\n      searchQuery: \"\",\r\n      showSuccessAlert: false,\r\n      message: \"\",\r\n      categoryExists: false,\r\n    };\r\n  },\r\n\r\n  async mounted() {\r\n    try {\r\n      // Fetch categories\r\n      const categoriesResponse = await CategoryService.getAllCategories();\r\n      this.categories = categoriesResponse.data;\r\n\r\n      // Fetch products\r\n      const productsResponse = await ProductService.getAllProducts();\r\n      this.products = productsResponse.data;\r\n\r\n      // Assign category name to each product\r\n      for (const product of this.products) {\r\n        product.categoryName = await this.getCategoryName(product.category);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    // Computed property to filter products based on selected category\r\n    filteredProducts() {\r\n      const query = this.searchQuery.toLowerCase().trim();\r\n\r\n      if (!query && !this.selectedCategory) {\r\n        return this.products; // Return all products if no category is selected and search query is empty\r\n      } else if (!query && this.selectedCategory) {\r\n        // Filter products based on selected category only\r\n        return this.products.filter(\r\n          (product) => product.category === this.selectedCategory.id\r\n        );\r\n      } else if (query && !this.selectedCategory) {\r\n        // Filter products based on search query only\r\n        return this.products.filter((product) =>\r\n          product.name.toLowerCase().includes(query)\r\n        );\r\n      } else {\r\n        // Filter products based on both selected category and search query\r\n        return this.products.filter(\r\n          (product) =>\r\n            product.category === this.selectedCategory.id &&\r\n            product.name.toLowerCase().includes(query)\r\n        );\r\n      }\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    async getCategoryName(categoryId) {\r\n      try {\r\n        const category = await CategoryService.getCategoryById(categoryId);\r\n        return category.name;\r\n      } catch (error) {\r\n        console.error(\"Error fetching category by id:\", error);\r\n        return \"Unknown\";\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      const year = date.getFullYear();\r\n      const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n      const day = date.getDate().toString().padStart(2, \"0\");\r\n      return `${year}-${month}-${day}`;\r\n    },\r\n    // Method to handle info button click and set selectedProduct\r\n    showProductInfo(product) {\r\n      this.selectedProduct = product;\r\n      this.showInfoModal = true;\r\n    },\r\n    // Method to handle edit button click and set selectedProduct\r\n    showProductEdit(product) {\r\n      this.selectedProduct = product;\r\n      this.showEditModal = true;\r\n    },\r\n    toggleNewCategoryInput() {\r\n      this.showNewCategoryInput = !this.showNewCategoryInput; // Toggle the visibility of the input field and add button\r\n      if (!this.showNewCategoryInput) {\r\n        this.newCategoryName = \"\"; // Clear the input field if it's hidden\r\n      }\r\n    },\r\n\r\n    showDeleteModal(product) {\r\n      this.showDeleteModalFlag = true;\r\n      this.productToDelete = product;\r\n    },\r\n    closeDeleteModal() {\r\n      this.showDeleteModalFlag = false;\r\n      this.productToDelete = null;\r\n    },\r\n    deleteProduct() {\r\n      if (this.productToDelete) {\r\n        // Assuming you have an array of products, remove the product\r\n        const index = this.products.findIndex(\r\n          (product) => product.id === this.productToDelete.id\r\n        );\r\n        if (index !== -1) {\r\n          this.products.splice(index, 1);\r\n        }\r\n        // You may need to make an API call to delete the product from the server as well\r\n      }\r\n      this.closeDeleteModal();\r\n    },\r\n\r\n    // Method to add new product to the products array\r\n    async handleSaveProduct(newProduct) {\r\n      console.log(\"created product data:\", newProduct);\r\n      // Fetch the updated list of products\r\n      const updatedProductsResponse = await ProductService.getAllProducts();\r\n      // Update the products array with the newly fetched list\r\n      this.products = updatedProductsResponse.data;\r\n      //this.mounted();\r\n      // Show success alert with delete message\r\n      this.showSuccessAlert = true;\r\n      this.message = \"Product created successfully.\";\r\n    },\r\n\r\n    handleSaveChanges(editedProduct) {\r\n      // Find the index of the edited product in the products array\r\n      const index = this.products.findIndex(\r\n        (product) => product.id === editedProduct.id\r\n      );\r\n      if (index !== -1) {\r\n        // Update the product data in the products array\r\n        this.products[index] = editedProduct;\r\n      }\r\n      // Close the edit modal\r\n      this.showEditModal = false;\r\n    },\r\n\r\n    async addNewCategory() {\r\n      // Check if the new category name is not empty\r\n      if (this.newCategoryName.trim() !== \"\") {\r\n        try {\r\n          await CategoryService.createCategory({\r\n            name: this.newCategoryName,\r\n          });\r\n\r\n          // Fetch the updated list of categories\r\n          const updatedCategoriesResponse =\r\n            await CategoryService.getAllCategories();\r\n          // Update the categories array with the newly fetched list\r\n          this.categories = updatedCategoriesResponse.data;\r\n\r\n          // Show success alert with delete message\r\n          this.showSuccessAlert = true;\r\n          this.message = \"Category created successfully.\";\r\n          this.categoryExists = false;\r\n\r\n          this.newCategoryName = \"\"; // Clear the input field after adding the category\r\n          this.toggleNewCategoryInput(); // Hide the input field and add button after adding the category\r\n        } catch (error) {\r\n          // Handle error response\r\n          if (error.response && error.response.status === 400) {\r\n            this.categoryExists = true; // Set flag to display error message\r\n            console.error(\"Error Category already exist:\", error);\r\n          } else {\r\n            // Other errors\r\n            console.error(\"Error creating category:\", error);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async deleteCategory(id) {\r\n      // this.categories.splice(index, 1);\r\n      try {\r\n        await CategoryService.deleteCategory(id);\r\n        // Fetch the updated list of categories\r\n        const updatedCategoriesResponse =\r\n          await CategoryService.getAllCategories();\r\n        // Update the categories array with the newly fetched list\r\n        this.categories = updatedCategoriesResponse.data;\r\n        // Show success alert with delete message\r\n        this.showSuccessAlert = true;\r\n        this.message = \"Category deleted successfully.\";\r\n      } catch (error) {\r\n        console.error(\"Error deleting category:\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.table-container {\r\n  height: 480px;\r\n}\r\ntd,\r\nth {\r\n  text-align: center;\r\n}\r\ntd {\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n}\r\nthead {\r\n  background-color: var(--primary);\r\n  color: var(--white);\r\n}\r\n\r\n/* width */\r\n::-webkit-scrollbar {\r\n  width: 4px;\r\n  height: 4px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n  background: var(--primary);\r\n  border-radius: 5px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #004aad;\r\n}\r\n.button-group {\r\n  padding: 5% 5% 5% 5%;\r\n  margin-top: -2px;\r\n}\r\n.action-button {\r\n  width: 1.2em;\r\n  height: 1.2em;\r\n  padding: 13%;\r\n  border-radius: 50%;\r\n  background-color: #476ffe;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.icon-container {\r\n  height: 15px;\r\n  margin: 4px auto;\r\n  display: flex;\r\n}\r\n.info-button {\r\n  margin-right: 0.8rem;\r\n  margin-left: 0.8rem;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}