{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/* eslint-disable */\nimport authService from \"@/services/auth.service\";\nimport userService from \"../services/user.service\";\nimport EditUserModal from \"../components/User/EditUserModal.vue\";\nimport deleteUserModal from \"../components/User/deleteUserModal.vue\";\nimport Alert from \"../components/AlertModal.vue\";\nexport default {\n  name: \"user\",\n  components: {\n    EditUserModal,\n    deleteUserModal,\n    Alert\n  },\n  data() {\n    return {\n      buttonText: \"Upload Image\",\n      showModal: false,\n      uploadedImage: null,\n      // Add a data property to store the uploaded image\n      accessMessage: \"\",\n      users: [],\n      successMessage: false,\n      // Define data properties for managing modal and selected user\n      showEditModal: false,\n      showDeleteModal: false,\n      selectedUser: null,\n      showSuccessAlert: false,\n      message: \"\",\n      searchQuery: \"\"\n    };\n  },\n  methods: {\n    // Method to open edit modal and set selected user\n    editUser(user) {\n      console.log(user);\n      this.showEditModal = true;\n      this.selectedUser = user;\n      console.log(user.id);\n    },\n    deleteUser(user) {\n      console.log(user);\n      this.selectedUser = user;\n      this.showDeleteModal = true;\n      console.log(user._id);\n    },\n    async handleDeletetUser(deletedUser) {\n      console.log(\"Deleted user data:\", deletedUser);\n      // Fetch the updated list of users\n      const updatedUsersResponse = await userService.getAllUsers();\n      // Update the users array with the newly fetched list\n      this.users = updatedUsersResponse.data;\n      // Show success alert with delete message\n      this.showSuccessAlert = true;\n      this.message = \"User deleted successfully.\";\n    },\n    async handleEditUser(updatedUserData) {\n      console.log(\"Edited user data:\", updatedUserData);\n      // Fetch the updated list of users\n      const updatedUsersResponse = await userService.getAllUsers();\n      // Update the users array with the newly fetched list\n      this.users = updatedUsersResponse.data;\n      // Show success alert with edit message\n      this.showSuccessAlert = true;\n      this.message = \"User updated successfully.\";\n    },\n    handleModalClose() {\n      // Handle the modal close event here\n      this.showEditModal = false; // Close the modal\n    },\n    closeSuccessAlert() {\n      // Method to close the success alert\n      this.showSuccessAlert = false;\n    },\n    async handleSubmit(event) {\n      event.preventDefault();\n\n      // Extract user input from form fields\n      const username = event.target.elements.username.value;\n      const email = event.target.elements.email.value;\n      const phoneNumber = event.target.elements.phoneNumber.value;\n      const address = event.target.elements.address.value;\n      const password = event.target.elements.password.value;\n      const user = {\n        username: username,\n        email: email,\n        password: password,\n        phoneNumber: phoneNumber,\n        address: address\n      };\n      try {\n        // Call the register method of authService to sign up the user\n        const response = await authService.register(user);\n\n        // Handle success response\n        this.accessMessage = response.data.message;\n        this.successMessage = true;\n        // Fetch the updated list of users\n        const updatedUsersResponse = await userService.getAllUsers();\n        // Update the users array with the newly fetched list\n        this.users = updatedUsersResponse.data;\n      } catch (error) {\n        // Handle error\n        console.error(\"Error signing up:\", error);\n        // Display error message to the user\n        this.accessMessage = error.response.data.message || \"An error occurred while signing up.\";\n        this.successMessage = false;\n      }\n    },\n    closeModal() {\n      // Close the modal\n      this.showModal = false;\n      // Clear the accessMessage when modal is closed\n      this.accessMessage = \"\";\n    },\n    selectImage() {\n      this.$refs.fileInput.click();\n    },\n    handleImageUpload(event) {\n      const file = event.target.files[0];\n      this.uploadedImage = URL.createObjectURL(file);\n      this.buttonText = \"Change Image\";\n    },\n    handleSearch() {\n      // Triggered when search input changes\n      // You can perform additional actions here if needed\n    }\n  },\n  async mounted() {\n    // Move mounted method outside of the methods object\n    // Call getAllUsers method when the component is mounted\n    console.log(\"Component mounted\");\n    try {\n      const response = await userService.getAllUsers();\n      this.users = response.data; // Assign fetched users to the data property\n      // Map the users to include only the necessary fields (including the ID)\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      // Handle error\n    }\n  },\n  computed: {\n    filteredUsers() {\n      // Filter users based on search query\n      return this.users.filter(user => user.username.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  }\n};","map":{"version":3,"names":["authService","userService","EditUserModal","deleteUserModal","Alert","name","components","data","buttonText","showModal","uploadedImage","accessMessage","users","successMessage","showEditModal","showDeleteModal","selectedUser","showSuccessAlert","message","searchQuery","methods","editUser","user","console","log","id","deleteUser","_id","handleDeletetUser","deletedUser","updatedUsersResponse","getAllUsers","handleEditUser","updatedUserData","handleModalClose","closeSuccessAlert","handleSubmit","event","preventDefault","username","target","elements","value","email","phoneNumber","address","password","response","register","error","closeModal","selectImage","$refs","fileInput","click","handleImageUpload","file","files","URL","createObjectURL","handleSearch","mounted","computed","filteredUsers","filter","toLowerCase","includes"],"sources":["C:\\Users\\Utente\\Desktop\\ShoppableApplication\\admin\\src\\views\\profil.vue"],"sourcesContent":["<template>\r\n  <Transition name=\"modal\">\r\n    <form class=\"p-4 md:p-5 w-full max-w-xl mx-auto\">\r\n      <div class=\"relative p-4 w-full max-w-3xl max-h-full\">\r\n        <!-- Modal content -->\r\n        <div class=\"relative bg-white rounded-lg shadow dark:bg-gray-700\">\r\n          <!-- Modal header -->\r\n          <div\r\n            class=\"flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600\"\r\n          >\r\n            <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              Account Informations\r\n            </h3>\r\n          </div>\r\n          <!-- Modal body -->\r\n          <form\r\n            class=\"p-4 md:p-5 w-full max-w-xl mx-auto\"\r\n            @submit.prevent=\"handleSubmit\"\r\n            method=\"POST\"\r\n          >\r\n            <div class=\"flex flex-col justify_center\">\r\n              <div class=\"px-4 py-1 m-2\">\r\n                <label\r\n                  for=\"userName\"\r\n                  text=\"samar ait lmaalem\"\r\n                  class=\"block mb-2 text-sm font-medium text-left text-gray-900 dark:text-white\"\r\n                  >Full Name</label\r\n                >\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  id=\"userName\"\r\n                  class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  placeholder=\"Type user name\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div class=\"px-4 py-2 m-2\">\r\n                <label\r\n                  for=\"phoneNumber\"\r\n                  class=\"block mb-2 text-sm font-medium text-left text-gray-900 dark:text-white\"\r\n                  >Phone number</label\r\n                >\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"phoneNumber\"\r\n                  id=\"phoneNumber\"\r\n                  class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  placeholder=\"Type user phone number\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div class=\"px-4 py-2 m-2\">\r\n                <label\r\n                  for=\"address\"\r\n                  class=\"block mb-2 text-sm font-medium text-left text-gray-900 dark:text-white\"\r\n                  >Address</label\r\n                >\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  id=\"address\"\r\n                  class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  required\r\n                  placeholder=\"Type user address\"\r\n                />\r\n              </div>\r\n              <div class=\"px-4 py-2 m-2\">\r\n                <label\r\n                  for=\"email\"\r\n                  class=\"block mb-2 text-sm font-medium text-left text-gray-900 dark:text-white\"\r\n                  >Email</label\r\n                >\r\n                <input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  required\r\n                  placeholder=\"Type user email\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              class=\"text-white mt-4 mb-4 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\r\n            >\r\n              Save\r\n            </button>\r\n            <!-- <div\r\n                    v-if=\"accessMessage\"\r\n                    :class=\"{\r\n                      'text-green-600': successMessage,\r\n                      'text-red-600': !successMessage,\r\n                    }\"\r\n                  >\r\n                    {{ accessMessage }}\r\n                  </div> -->\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </Transition>\r\n</template>\r\n<script>\r\n/* eslint-disable */\r\nimport authService from \"@/services/auth.service\";\r\nimport userService from \"../services/user.service\";\r\nimport EditUserModal from \"../components/User/EditUserModal.vue\";\r\nimport deleteUserModal from \"../components/User/deleteUserModal.vue\";\r\nimport Alert from \"../components/AlertModal.vue\";\r\n\r\nexport default {\r\n  name: \"user\",\r\n  components: {\r\n    EditUserModal,\r\n    deleteUserModal,\r\n    Alert,\r\n  },\r\n  data() {\r\n    return {\r\n      buttonText: \"Upload Image\",\r\n      showModal: false,\r\n      uploadedImage: null, // Add a data property to store the uploaded image\r\n      accessMessage: \"\",\r\n      users: [],\r\n      successMessage: false,\r\n      // Define data properties for managing modal and selected user\r\n      showEditModal: false,\r\n      showDeleteModal: false,\r\n      selectedUser: null,\r\n      showSuccessAlert: false,\r\n      message: \"\",\r\n      searchQuery: \"\",\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // Method to open edit modal and set selected user\r\n    editUser(user) {\r\n      console.log(user);\r\n      this.showEditModal = true;\r\n      this.selectedUser = user;\r\n      console.log(user.id);\r\n    },\r\n    deleteUser(user) {\r\n      console.log(user);\r\n      this.selectedUser = user;\r\n      this.showDeleteModal = true;\r\n      console.log(user._id);\r\n    },\r\n    async handleDeletetUser(deletedUser) {\r\n      console.log(\"Deleted user data:\", deletedUser);\r\n      // Fetch the updated list of users\r\n      const updatedUsersResponse = await userService.getAllUsers();\r\n      // Update the users array with the newly fetched list\r\n      this.users = updatedUsersResponse.data;\r\n      // Show success alert with delete message\r\n      this.showSuccessAlert = true;\r\n      this.message = \"User deleted successfully.\";\r\n    },\r\n    async handleEditUser(updatedUserData) {\r\n      console.log(\"Edited user data:\", updatedUserData);\r\n      // Fetch the updated list of users\r\n      const updatedUsersResponse = await userService.getAllUsers();\r\n      // Update the users array with the newly fetched list\r\n      this.users = updatedUsersResponse.data;\r\n      // Show success alert with edit message\r\n      this.showSuccessAlert = true;\r\n      this.message = \"User updated successfully.\";\r\n    },\r\n    handleModalClose() {\r\n      // Handle the modal close event here\r\n      this.showEditModal = false; // Close the modal\r\n    },\r\n    closeSuccessAlert() {\r\n      // Method to close the success alert\r\n      this.showSuccessAlert = false;\r\n    },\r\n    async handleSubmit(event) {\r\n      event.preventDefault();\r\n\r\n      // Extract user input from form fields\r\n      const username = event.target.elements.username.value;\r\n      const email = event.target.elements.email.value;\r\n      const phoneNumber = event.target.elements.phoneNumber.value;\r\n      const address = event.target.elements.address.value;\r\n      const password = event.target.elements.password.value;\r\n\r\n      const user = {\r\n        username: username,\r\n        email: email,\r\n        password: password,\r\n        phoneNumber: phoneNumber,\r\n        address: address,\r\n      };\r\n      try {\r\n        // Call the register method of authService to sign up the user\r\n        const response = await authService.register(user);\r\n\r\n        // Handle success response\r\n        this.accessMessage = response.data.message;\r\n        this.successMessage = true;\r\n        // Fetch the updated list of users\r\n        const updatedUsersResponse = await userService.getAllUsers();\r\n        // Update the users array with the newly fetched list\r\n        this.users = updatedUsersResponse.data;\r\n      } catch (error) {\r\n        // Handle error\r\n        console.error(\"Error signing up:\", error);\r\n        // Display error message to the user\r\n        this.accessMessage =\r\n          error.response.data.message || \"An error occurred while signing up.\";\r\n        this.successMessage = false;\r\n      }\r\n    },\r\n    closeModal() {\r\n      // Close the modal\r\n      this.showModal = false;\r\n      // Clear the accessMessage when modal is closed\r\n      this.accessMessage = \"\";\r\n    },\r\n    selectImage() {\r\n      this.$refs.fileInput.click();\r\n    },\r\n    handleImageUpload(event) {\r\n      const file = event.target.files[0];\r\n      this.uploadedImage = URL.createObjectURL(file);\r\n      this.buttonText = \"Change Image\";\r\n    },\r\n    handleSearch() {\r\n      // Triggered when search input changes\r\n      // You can perform additional actions here if needed\r\n    },\r\n  },\r\n  async mounted() {\r\n    // Move mounted method outside of the methods object\r\n    // Call getAllUsers method when the component is mounted\r\n    console.log(\"Component mounted\");\r\n    try {\r\n      const response = await userService.getAllUsers();\r\n\r\n      this.users = response.data; // Assign fetched users to the data property\r\n      // Map the users to include only the necessary fields (including the ID)\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n      // Handle error\r\n    }\r\n  },\r\n  computed: {\r\n    filteredUsers() {\r\n      // Filter users based on search query\r\n      return this.users.filter((user) =>\r\n        user.username.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}