{"ast":null,"code":"import AuthService from \"../services/auth.service\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({\n      commit\n    }, user) {\n      return AuthService.login(user).then(data => {\n        commit(\"loginSuccess\", data); // Mutate the state upon successful login\n        return Promise.resolve(data);\n      }).catch(error => {\n        commit(\"loginFailure\", error); // Mutate the state upon login failure\n        return Promise.reject(error);\n      });\n    },\n    logout({\n      commit\n    }) {\n      AuthService.logout();\n      commit(\"logout\");\n    }\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    }\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","data","Promise","resolve","catch","error","reject","logout","mutations","loginSuccess","loginFailure"],"sources":["C:/Users/Utente/Desktop/ShoppableApplication/admin/src/store/index.js"],"sourcesContent":["import AuthService from \"../services/auth.service\";\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\nconst initialState = user\r\n  ? { status: { loggedIn: true }, user }\r\n  : { status: { loggedIn: false }, user: null };\r\n\r\nexport const auth = {\r\n  namespaced: true,\r\n  state: initialState,\r\n  actions: {\r\n    login({ commit }, user) {\r\n      return AuthService.login(user)\r\n        .then((data) => {\r\n          commit(\"loginSuccess\", data); // Mutate the state upon successful login\r\n          return Promise.resolve(data);\r\n        })\r\n        .catch((error) => {\r\n          commit(\"loginFailure\", error); // Mutate the state upon login failure\r\n          return Promise.reject(error);\r\n        });\r\n    },\r\n    logout({ commit }) {\r\n      AuthService.logout();\r\n      commit(\"logout\");\r\n    },\r\n  },\r\n  mutations: {\r\n    loginSuccess(state, user) {\r\n      state.status.loggedIn = true;\r\n      state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    logout(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAElD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrD,MAAMC,YAAY,GAAGL,IAAI,GACrB;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAAEP;AAAK,CAAC,GACpC;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAM,CAAC;EAAEP,IAAI,EAAE;AAAK,CAAC;AAE/C,OAAO,MAAMQ,IAAI,GAAG;EAClBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAEL,YAAY;EACnBM,OAAO,EAAE;IACPC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEb,IAAI,EAAE;MACtB,OAAOD,WAAW,CAACa,KAAK,CAACZ,IAAI,CAAC,CAC3Bc,IAAI,CAAEC,IAAI,IAAK;QACdF,MAAM,CAAC,cAAc,EAAEE,IAAI,CAAC,CAAC,CAAC;QAC9B,OAAOC,OAAO,CAACC,OAAO,CAACF,IAAI,CAAC;MAC9B,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;QAChBN,MAAM,CAAC,cAAc,EAAEM,KAAK,CAAC,CAAC,CAAC;QAC/B,OAAOH,OAAO,CAACI,MAAM,CAACD,KAAK,CAAC;MAC9B,CAAC,CAAC;IACN,CAAC;IACDE,MAAMA,CAAC;MAAER;IAAO,CAAC,EAAE;MACjBd,WAAW,CAACsB,MAAM,CAAC,CAAC;MACpBR,MAAM,CAAC,QAAQ,CAAC;IAClB;EACF,CAAC;EACDS,SAAS,EAAE;IACTC,YAAYA,CAACb,KAAK,EAAEV,IAAI,EAAE;MACxBU,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAGA,IAAI;IACnB,CAAC;IACDwB,YAAYA,CAACd,KAAK,EAAE;MAClBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACnB,CAAC;IACDqB,MAAMA,CAACX,KAAK,EAAE;MACZA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACnB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}